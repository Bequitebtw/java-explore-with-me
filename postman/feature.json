{
	"info": {
		"_postman_id": "b2e4fa71-ea6c-4844-a82f-5b55444ddb4e",
		"name": "comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "42106814"
	},
	"item": [
		{
			"name": "User create",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set('userEmail', generateRandomString(10) + \"@mail.ru\");\r",
							"pm.environment.set('userName', generateRandomString(10));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"});\r",
							"\r",
							"const userData = pm.response.json();\r",
							"pm.collectionVariables.set(\"userId1\", userData.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/users"
			},
			"response": []
		},
		{
			"name": "User create 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set('userEmail', generateRandomString(10) + \"@mail.ru\");\r",
							"pm.environment.set('userName', generateRandomString(10));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"});\r",
							"\r",
							"const userData = pm.response.json();\r",
							"pm.collectionVariables.set(\"userId2\", userData.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/users"
			},
			"response": []
		},
		{
			"name": "User create 3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set('userEmail', generateRandomString(10) + \"@mail.ru\");\r",
							"pm.environment.set('userName', generateRandomString(10));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"});\r",
							"\r",
							"const userData = pm.response.json();\r",
							"pm.collectionVariables.set(\"userId3\", userData.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/users"
			},
			"response": []
		},
		{
			"name": "Category create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Category created successfully\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"});\r",
							"\r",
							"const categoryData = pm.response.json();\r",
							"pm.collectionVariables.set(\"categoryId\", categoryData.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set('categoryName', generateRandomString(10));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{categoryName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/categories"
			},
			"response": []
		},
		{
			"name": "Event create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Category created successfully\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('comments');\r",
							"});\r",
							"\r",
							"const eventData = pm.response.json();\r",
							"pm.collectionVariables.set(\"eventId\", eventData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Sapiente a sed quod architecto. Est accusantium illo molestiae. Recusandae natus ut autem repudiandae saepe officia et. Voluptatem deleniti incidunt neque. Reiciendis officia ducimus rerum rerum.\",\r\n  \"category\": {{categoryId}},\r\n  \"description\": \"Et nihil eos omnis. Itaque voluptate aut in qui debitis eaque explicabo aut unde. Consequuntur id aspernatur quia deleniti atque ex. Autem enim cum asperiores cum quia amet repellendus. Omnis et nam reprehenderit in similique.\\n \\rReprehenderit molestias incidunt enim voluptatibus. Repellat atque sed quis atque perspiciatis praesentium eligendi fuga quaerat. Ducimus cupiditate maxime officia rerum qui. Aliquid et et. Natus itaque quod omnis ut repellendus itaque ea.\\n \\rCum assumenda est. Sunt iure et quibusdam in at. Quas id iure assumenda.\",\r\n  \"eventDate\": \"2026-07-11 05:48:08\",\r\n  \"location\": {\r\n    \"lat\": 10.4132,\r\n    \"lon\": -84.3052\r\n  },\r\n  \"isCommentsOpen\": false,\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Rerum voluptas id pariatur omnis distinctio dolor praesentium ipsa est.\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/{{userId1}}/events"
			},
			"response": []
		},
		{
			"name": "Comment create Fail Open",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Очень крутой ивент\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/comments?eventId={{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "AllowDoComments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Event edited successfully\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"isCommentsOpen\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/events/{{eventId}}"
			},
			"response": []
		},
		{
			"name": "Comment create Fail Published",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"Очень крутой ивент\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/comments?eventId={{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PublishEvent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Event edited successfully\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/events/{{eventId}}"
			},
			"response": []
		},
		{
			"name": "Comment create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Comment created successfully\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData).to.have.property('postedAt');\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"});\r",
							"\r",
							"const commentData = pm.response.json();\r",
							"pm.collectionVariables.set(\"commentId1\", commentData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set('comment1Name', generateRandomString(10));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"{{comment1Name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId1}}/comments?eventId={{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId1}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Comment created successfully\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData).to.have.property('postedAt');\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"});\r",
							"\r",
							"const commentData = pm.response.json();\r",
							"pm.collectionVariables.set(\"commentId2\", commentData.id);\r",
							"pm.collectionVariables.set(\"commentAuthor2\", commentData.author);\r",
							"pm.collectionVariables.set(\"commentText2\", commentData.text);\r",
							"pm.collectionVariables.set(\"commentPostedAt2\", commentData.postedAt);\r",
							"pm.collectionVariables.set(\"commentIsEdited2\", commentData.isEdited);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set('comment2Name', generateRandomString(10));\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"{{comment2Name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId2}}/comments?eventId={{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId2}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Comment created successfully\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData).to.have.property('postedAt');\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"});\r",
							"\r",
							"const commentData = pm.response.json();\r",
							"pm.collectionVariables.set(\"commentId3\", commentData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set('comment3Name', generateRandomString(10));\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"{{comment3Name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId3}}/comments?eventId={{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId3}}",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comment by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Comment find successfully\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData).to.have.property('postedAt');\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    var id = pm.collectionVariables.get(\"commentId2\");\r",
							"    pm.expect(jsonData.id, '\"id\" must be ' + id).to.eql(Number(id));\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'auhor' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    var author = pm.collectionVariables.get(\"commentAuthor2\");\r",
							"    pm.expect(jsonData.author, '\"id\" must be ' + author).to.eql(author);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'postedAt' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('postedAt');\r",
							"    var postedAt = pm.collectionVariables.get(\"commentPostedAt2\");\r",
							"    pm.expect(jsonData.postedAt, '\"id\" must be ' + postedAt).to.eql(postedAt);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    var text = pm.collectionVariables.get(\"commentText2\");\r",
							"    pm.expect(jsonData.text, '\"id\" must be ' + text).to.eql(text);\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'isEdited' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    var isEdited = pm.collectionVariables.get(\"commentIsEdited2\");\r",
							"    pm.expect(jsonData.isEdited, '\"id\" must be ' + isEdited).to.eql(isEdited);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"222@mail.ru\",\r\n  \"name\": \"Дмитрий\"\r\n}"
				},
				"url": "{{baseUrl}}/admin/comments/{{commentId2}}"
			},
			"response": []
		},
		{
			"name": "Get event comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains an array\", function() {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(Array.isArray(response)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Array has exactly 3 elements\", function() {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.length).to.equal(3);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/admin/events/{{eventId}}/comments"
			},
			"response": []
		},
		{
			"name": "Delete comment by wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\"\r\n}"
				},
				"url": "{{baseUrl}}/users/{{userId3}}/comments/{{commentId2}}"
			},
			"response": []
		},
		{
			"name": "Delete comment by event initiator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\"\r\n}"
				},
				"url": "{{baseUrl}}/users/{{userId1}}/comments/{{commentId3}}"
			},
			"response": []
		},
		{
			"name": "Delete comment by comment author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\"\r\n}"
				},
				"url": "{{baseUrl}}/users/{{userId2}}/comments/{{commentId2}}"
			},
			"response": []
		},
		{
			"name": "Edit comment by wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Мне все понравилось, крутой ивент!!!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/users/{{userId3}}/comments/{{commentId1}}"
			},
			"response": []
		},
		{
			"name": "Edit comment by author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Comment created successfully\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData).to.have.property('postedAt');\r",
							"    pm.expect(jsonData).to.have.property('isEdited');\r",
							"    pm.expect(jsonData.isEdited).to.equal(true);\r",
							"    var text = pm.collectionVariables.get(\"editComment\");\r",
							"    pm.expect(jsonData.text, '\"text\" must be ' + text).to.eql(text);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomString(length) {\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        result += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.collectionVariables.set('editComment', generateRandomString(10));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"{{editComment}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/users/{{userId1}}/comments/{{commentId1}}"
			},
			"response": []
		},
		{
			"name": "Delete comment by admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/admin/comments/{{commentId1}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "userName",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "userEmail",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userId1",
			"value": ""
		},
		{
			"key": "userId2",
			"value": ""
		},
		{
			"key": "userId3",
			"value": ""
		},
		{
			"key": "commentId1",
			"value": ""
		},
		{
			"key": "commentId2",
			"value": ""
		},
		{
			"key": "commentAuthor2",
			"value": ""
		},
		{
			"key": "commentText2",
			"value": ""
		},
		{
			"key": "commentPostedAt2",
			"value": ""
		},
		{
			"key": "commentIsEdited2",
			"value": ""
		},
		{
			"key": "commentId3",
			"value": ""
		},
		{
			"key": "commentEditName",
			"value": ""
		},
		{
			"key": "editComment",
			"value": ""
		}
	]
}